// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for a Discord user for a discord bot
model User {
  id                      String         @id @default(cuid())
  discordId               String         @unique
  avatar                  String?
  gp                      Int            @default(0)
  rsn                     String?
  task                    SlayerTask?    @relation(fields: [taskId], references: [id])
  taskId                  String?
  slayer                  SlayerOptions? @relation(fields: [slayerId], references: [id])
  slayerId                Int?
  previousTask            String?
  slayerExperience        Int            @default(0)
  tasksCompleted          Int            @default(0)
  canCreateTriviaQuestion Boolean        @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([discordId])
}

model LiveUser {
  id        String   @id @default(cuid())
  channel   String
  messageId String
  createdAt DateTime @default(now())
}

model SlayerOptions {
  id        Int     @id @default(autoincrement())
  afkSlayer Boolean @default(false)
  user      User[]
  userId    String
}

model SlayerTask {
  id String @id @default(cuid())

  name         String
  amount       Int
  taskMaster   String
  experience   Int
  shopModified Boolean @default(false)

  user   User[]
  userId String @unique

  createdAt  DateTime @default(now())
  finishedAt DateTime

  @@index([userId])
}

model TriviaQuestion {
  id String @id @default(cuid())

  question  String
  answer    String
  createdBy String

  createdAt DateTime @default(now())
}
